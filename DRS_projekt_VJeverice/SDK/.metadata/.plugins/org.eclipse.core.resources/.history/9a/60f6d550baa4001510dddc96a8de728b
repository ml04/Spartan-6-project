
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "vga_controller.h"
#include "xgpio.h"
#include "xps2.h"

#define KEYBOARD_ACK 0xFA

int Ps2Initialize(u16 Ps2DeviceId);
int Ps2ReceiveData();


static XPs2 Ps2Inst;
u8 SendCODE = 0xED;
u8 RxBuffer;
int location_x1=50;
int location_y1=90;
int location_x2=50;
int location_y2=190;
int location_x3=50;
int location_y3=290;
int location_x4=50;
int location_y4=390;
int flag1=0;
int flag2=0;
int flag3=0;
int flag4=0;
int broj_tipkanja=0;



void print(char *str);

int main()
{
    int Status, i, j;

    VGA_CONTROLLER_mWriteSlaveReg1(XPAR_VGA_CONTROLLER_0_BASEADDR,0, location_x1);
    VGA_CONTROLLER_mWriteSlaveReg2(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y1);
    VGA_CONTROLLER_mWriteSlaveReg3(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_x2);
    VGA_CONTROLLER_mWriteSlaveReg4(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y2);
    VGA_CONTROLLER_mWriteSlaveReg5(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_x3);
    VGA_CONTROLLER_mWriteSlaveReg6(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y3);
    VGA_CONTROLLER_mWriteSlaveReg7(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_x4);
    VGA_CONTROLLER_mWriteSlaveReg8(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y4);

    Status = Ps2Initialize(XPAR_PS2_0_DEVICE_ID);
    	if (Status != XST_SUCCESS) {
    		return XST_FAILURE;
    	}


    while(1){
    	do{
    		Status = Ps2ReceiveData();
    		    	if (Status != XST_SUCCESS){
    		    		return XST_FAILURE;
    		    		print("Data receiving FAILED!\r\n");
    		    	}
    	} while(RxBuffer!=0xF0);

    	Status = Ps2ReceiveData();
    	if (Status != XST_SUCCESS){
    		return XST_FAILURE;
    		print("Data receiving FAILED!\r\n");
    	}
    	else
    		//xil_printf("Vrijednost primljena od tipkovnice je 0x%x\r\n", RxBuffer);

    	do{
    		// prvi igraè
    	if(RxBuffer == 0x16){
    		flag1=1;
    	}
    	if(RxBuffer == 0x26 && flag1 == 1)
    	{
    		location_x1+=8;
    		flag1 = 0;
    		broj_tipkanja++;
    	}
    	// drugi igraè
    	if(RxBuffer == 0x43){
    	    flag2=1;
    	}
    	if(RxBuffer == 0x4D && flag2 == 1)
    	{
    	    location_x2+=8;
    	    flag2 = 0;
    	    broj_tipkanja++;
    	}

    	// treæi igraè

    	if(RxBuffer == 0x05){
    	    flag3=1;
    	}
    	if(RxBuffer == 0x04 && flag3 == 1)
    	{
    	    location_x3+=8;
    	    flag3 = 0;
    	    broj_tipkanja++;
    	    	}

    	// èetvrti igraè

    	if(RxBuffer == 0x09){
    	    flag4=1;
    	}
    	if(RxBuffer == 0x07 && flag4 == 1)
    	{
    	    location_x4+=8;
    	    flag4 = 0;
    	    broj_tipkanja++;
    	}

    	VGA_CONTROLLER_mWriteSlaveReg1(XPAR_VGA_CONTROLLER_0_BASEADDR,0, location_x1);
    	VGA_CONTROLLER_mWriteSlaveReg2(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y1);
    	VGA_CONTROLLER_mWriteSlaveReg3(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_x2);
    	VGA_CONTROLLER_mWriteSlaveReg4(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y2);
    	VGA_CONTROLLER_mWriteSlaveReg5(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_x3);
    	VGA_CONTROLLER_mWriteSlaveReg6(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y3);
    	VGA_CONTROLLER_mWriteSlaveReg7(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_x4);
    	VGA_CONTROLLER_mWriteSlaveReg8(XPAR_VGA_CONTROLLER_0_BASEADDR,0,location_y4);


    	}while (location_x1 <= 506 || location_x2 <= 506 || location_x3 <= 506 || location_x4 <= 506);

    	/*if(RxBuffer==0x44)
    	xil_printf("Broj tipkanja: %d\n\r", broj_tipkanja);*/

    		/*if(pritisnuta_tipka_A)
    			lokacija_prvog++;
    		else if(pritisnuta_tipka_B)
    			lokacija_drugog++;*/






    	}







    return 0;
}

int Ps2Initialize(u16 Ps2DeviceId)
{
	XPs2_Config *Ps2ConfigPtr;

	//******Dohvatiti konfiguraciju PS2 suèelja, povratnu vrijednost spremiti u varijablu Ps2ConfigPtr*******//

	Ps2ConfigPtr = XPs2_LookupConfig(Ps2DeviceId);
	//******************************************************************************************************//
	if (Ps2ConfigPtr == NULL) {
		print("Config Lookup FAILED!\r\n");
		return XST_FAILURE;
	}
	else
		print("Config Lookup SUCCESS!\r\n");
	//*************************************Inicijalizirati PS2 kontroler*************************************//

	XPs2_CfgInitialize(&Ps2Inst, Ps2ConfigPtr, Ps2ConfigPtr->BaseAddress);
		//*******************************************************************************************************//

	print("PS2 Initialize SUCCESS!\r\n");
	return XST_SUCCESS;
 }

int Ps2ReceiveData(){

	u32 StatusReg;
	u32 BytesReceived;

	do {
		StatusReg = XPs2_GetStatus(&Ps2Inst);
	}while((StatusReg & XPS2_STATUS_RX_FULL) == 0);


	//***Primiti 1 byte podataka putem PS2 sucelja, povratnu vrijdnost spremiti u varijablu BytesReceived****//
BytesReceived = XPs2_Recv(&Ps2Inst, &RxBuffer, 1);

	//*******************************************************************************************************//

	return XST_SUCCESS;
  }
